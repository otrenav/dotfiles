export ZSH=$HOME/.oh-my-zsh
unsetopt share_history

ZSH_COMMAND_TIME_MSG="\n[Execution time: %s] \n \n"
DISABLE_AUTO_TITLE="true"
CASE_SENSITIVE="true"
ZSH_THEME="elessar"

plugins=(
    zsh-syntax-highlighting
    zsh-autosuggestions
    zsh-completions
    command-time
)

export VISUAL="emacs"
export EDITOR="$VISUAL"
export LANG=en_US.UTF-8
source $ZSH/oh-my-zsh.sh
export PATH="$PATH:$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$HOME/.local/bin:$PATH"

# CUDA
export PATH="/usr/local/cuda/bin:$PATH"
export LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"

PDF_VIEWER=okular
DIR_BASE="/home/otrenav"
DIR_CODE="$DIR_BASE/code"
DIR_NOTES="$DIR_BASE/code/notes"
DIR_DOWNLOADS="$DIR_BASE/downloads"
DIR_CONTENT="$DIR_BASE/code/content"
DIR_PDFS="$DIR_BASE/drive/personal/knowledge"
DIR_DOTFILES="$DIR_BASE/code/sys/dotfiles"

alias e="exit"
alias more="most"
alias ka="killall"
alias t="./test.sh"
alias s="./server.sh"
alias emacs="emacs -nw"
alias disk_usage="du -sh"
alias ddone="spd-say Done"
alias double_click="xdg-open"
alias reload="source ~/.zshrc"
alias d="cd $DIR_DOWNLOADS; ls;"
alias ccat="highlight --out-format=ansi"
alias slack="flatpak run com.slack.Slack"
alias installed="aptitude search '~i!~M'"
alias file_count="find . -type f | wc -l"
alias open_ports="lsof -i -P -n | grep LISTEN"
alias open_ports="sudo lsof -i -P -n | grep LISTEN"
alias ls="ls -lGF --color=auto -lh -hN --group-directories-first"
alias lsall="ls -flaF --color=auto -lh -hN --group-directories-first"
alias tree_normal="tree -L 3 -I 'env|docs|__pycache__|*.pyc' --dirsfirst -h"
alias running_services="sudo systemctl list-units --type=service --state=running"
alias screen_recorder="flatpak run com.github.vkohaupt.vokoscreenNG"

alias chmod_normal_dirs="find . -type d -exec chmod u=rwx,g=rwx,o=rx {} \;"
alias chmod_normal_files="find . -type f -exec chmod u=rw,g=rw,o=r {} \;"

alias zconf="$EDITOR ~/.zshrc"
alias econf="$EDITOR ~/.spacemacs"
alias tconf="$EDITOR ~/.tmux.conf"
alias iconf="$EDITOR $DIR_DOTFILES/install.sh"

alias tmux-mll=". ~/code/sys/dotfiles/tmux/envs/mll.sh"
alias tmux-ayr=". ~/code/sys/dotfiles/tmux/envs/ayr.sh"
alias tmux-ftb=". ~/code/sys/dotfiles/tmux/envs/ftb.sh"
alias tmux-ic=". ~/code/sys/dotfiles/tmux/envs/ic.sh"
alias tmux-vf=". ~/code/sys/dotfiles/tmux/envs/vf.sh"

# Used by Firefox to store temporary files
export TMPDIR=~/downloads/.tmp

alias firefox-personal="nohup firefox -p 'personal' > /dev/null 2>&1 &"
alias firefox-vf-gcp="nohup firefox -p 'vf-gcp' > /dev/null 2>&1 &"
alias firefox-mllabs="nohup firefox -p 'mllabs' > /dev/null 2>&1 &"
alias firefox-ggstr="nohup firefox -p 'ggstr' > /dev/null 2>&1 &"
alias firefox-vf="nohup firefox -p 'vf' > /dev/null 2>&1 &"
alias firefox-pm="nohup firefox -p 'pm' > /dev/null 2>&1 &"

alias grep="grep --color=auto"
alias gg="grep --color=auto -rnwiI --exclude-dir={.git,node_modules,env} . -e"
# NOTE: To exclude `gg "[PATTERN]" --exclude=\*.{csv,json}

# Disable C-s and C-q for pausing terminal
stty -ixon

# Google Cloud
alias gcloud_gigster="gcloud config set account omar.trejo@gigsternetwork.com"
alias gcloud_vodafone="gcloud config set account omar.trej@vodafone.com"
alias gcloud_mllabs="gcloud config set account omar@mllabs.com"
export CLOUDSDK_PYTHON_SITEPACKAGES=1

# Python
alias kp="killall python"
alias cov_report="coverage run -m pytest ; coverage report -m --sort=cover"
alias cov_report_branch="coverage run -m --branch pytest ; coverage report -m --sort=cover"
alias pyclean="find . -name '*.py[co]' -o -name __pycache__ -exec rm -rf {} +"

# R
alias R="R --no-save"
alias r="R --no-save"
export R_PROFILE_USER="~/code/sys/dotfiles/r/Rprofile"

# Fuzzy matching
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPTS="--extended --layout=reverse --height=40%"
export FZF_DEFAULT_COMMAND="fdfind --type f"
export FZF_ALT_C_COMMAND="fdfind --type d ."

own_open_file_in_editor() {
    if [ ! -z "$1" ]; then
        echo "Editing: $1"
        if [ "$EDITOR" = "emacs" ]; then
            # Open in terminal (not GUI)
            $EDITOR -nw $1
        else
            $EDITOR $1
        fi
    fi
}

f() {
    fname="$(find . -type f \
    | grep -v env/ \
    | grep -v .git/ \
    | grep -v .png \
    | grep -v .avro \
    | grep -v __pycache__/ \
    | grep -v .pytest_cache/ \
    | fzf
    )"
    own_open_file_in_editor $fname
}

g() {
    fname="$(find $DIR_DOWNLOADS $DIR_DOTFILES $DIR_NOTES $DIR_CONTENT -type f \
    | sed -e "s|$DIR_BASE|~|" \
    | fzf \
    | sed -e "s|~|$DIR_BASE|"
    )"
    own_open_file_in_editor $fname
}

p() {
    $PDF_VIEWER "$DIR_PDFS$(du -a $DIR_PDFS | cut -f2 | grep .pdf | sed -e "s|$DIR_PDFS||" | fzf)"
}

# Node Version Manager (NVM)
export NVM_DIR="$HOME/.nvm"
nvm_load() {
    echo "Loading NVM..."
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    echo "DONE."
}

# Functions
function compress() {
    tar cfJ $1.tar.xz $1
}

function encrypt() {
    gpg -c -o $1.dat $1
}

function compress_encrypt() {
    compress $1
    encrypt $1.tar.xz
    rm $1.tar.xz
}

function file_directory_size() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

function show_keys() {
    gpg $1
    fl=$(echo $1 | sed "s/\.[^.]*$//")
    more "${fl}"
    rm "${fl}"
}

json() {
    jq --color-output . $1 | less -R
}

video_speed() {
    origi="$1"
    speed="$2"
    extension=".mp4"
    raw="${origi/$extension}-raw$extension"
    mv "$origi" "$raw"
    ffmpeg -i "$raw" -filter_complex "[0:v]setpts=PTS/1.5[v];[0:a]atempo=1.5[a]" -map "[v]" -map "[a]" "$origi"
}

video_compress() {
    origi="$1"
    extension=".mp4"
    raw="${origi/$extension}-raw$extension"
    mv "$origi" "$raw"
    ffmpeg -i "$raw" -vcodec libx265 -crf 28 "$origi"
}

git_untracked_list() {
    git fetch --prune && git branch -r | awk "{print \$1}" | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk "{print \$1}"
}

git_untracked_delete() {
    git fetch --prune && git branch -r | awk "{print \$1}" | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk "{print \$1}" | xargs git branch -d
}

hs_jwt_update() {
    PRJ_COGNITO_USR=otrenav
    PRJ_AWS_CLI_PROFILE=heart-sciences
    PRJ_COGNITO_CLIENT_ID=5cnoiaqrieu4r37oet8ja9ij6g
    PRJ_COGNITO_REGION=us-east-2

    echo "Password:"
    read -s prj_cognito_pwd
    echo "2FA:"
    read prj_cognito_2fa_token

    prj_tmp_session=`
        aws cognito-idp initiate-auth \
        --region=$PRJ_COGNITO_REGION \
        --profile=$PRJ_AWS_CLI_PROFILE \
        --client-id=$PRJ_COGNITO_CLIENT_ID \
        --auth-flow=USER_PASSWORD_AUTH \
        --auth-parameters="USERNAME=$PRJ_COGNITO_USR,PASSWORD=$prj_cognito_pwd" \
        --output=json \
        | jq -r .Session
    `
    echo ""
    echo "[+] Session: "
    echo ""
    echo $prj_tmp_session

    prj_jwt_updated=`
        aws cognito-idp respond-to-auth-challenge \
        --region=$PRJ_COGNITO_REGION \
        --profile=$PRJ_AWS_CLI_PROFILE \
        --client-id=$PRJ_COGNITO_CLIENT_ID \
        --challenge-name=SOFTWARE_TOKEN_MFA \
        --session=$prj_tmp_session \
        --challenge-responses="USERNAME=$PRJ_COGNITO_USR,SOFTWARE_TOKEN_MFA_CODE=$prj_cognito_2fa_token" \
        | jq -r .AuthenticationResult.AccessToken
    `
    sed -i~ \
      "s|PRJ_JWT=.*|PRJ_JWT=${prj_jwt_updated}|" \
      ~/code/mll/hs/platform/be/envs/env

    export PRJ_JWT=$prj_jwt_updated

    echo ""
    echo "[+] JWT updated to:"
    echo ""
    echo $prj_jwt_updated
}