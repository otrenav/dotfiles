#!/usr/bin/env bash

## Author:     Omar Trejo
## IRC handle: otrenav
## IRC server: freenode

##
## OS specific configuration
##
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
    ##
    ## Linux setup
    ##
    export PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/usr/texbin:/bin:/sbin:${PATH}"
    alias ls='ls -lGF --color=auto'
    alias lsall='ls -flaF --color=auto'
    alias firefox-otrenav='firefox -no-remote -P "otrenav" &'
    alias firefox-datata='firefox -no-remote -P "datata" &'
    export PATH="$HOME/.linuxbrew/bin:$PATH"
    export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
    export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
elif [[ "$unamestr" == 'Darwin' ]]; then
    ##
    ## Mac setup
    ##
    export PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:/Library/Frameworks/Python.framework/Versions/3.4/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/usr/texbin:/bin:/sbin:${PATH}"
    alias ls='ls -lGF'
    alias lsall='ls -flaF'
    alias R='R --no-save --quite'
    alias r='R --no-save --quite'
    alias matlab='/Applications/MATLAB_R2013a.app/bin/matlab'
    alias photoshop='open -a "Adobe Photoshop CS6"'
    alias julia='/Applications/Julia-0.4.0.app/Contents/Resources/julia/bin/julia'
    alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs'
    alias firefox-otrenav='/Applications/Firefox.app/Contents/MacOS/firefox -no-remote -P "otrenav" &'
    alias firefox-datata='/Applications/Firefox.app/Contents/MacOS/firefox -no-remote -P "datata" &'
    alias start_mysql='sudo /usr/local/mysql/support-files/mysql.server start'
    alias stop_mysql='sudo /usr/local/mysql/support-files/mysql.server stop'
    alias start_arangodb='sudo launchctl load ~/Library/LaunchAgents/homebrew.mxcl.arangodb.plist'
    alias stop_arangodb='sudo launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.arangodb.plist'
    alias start_cassandra='sudo launchctl load ~/Library/LaunchAgents/homebrew.mxcl.cassandra.plist'
    alias stop_cassandra='sudo launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.cassandra.plist'
    alias start_mongodb='sudo launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist'
    alias stop_mongodb='sudo launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist'
    alias start_elasticsearch='sudo launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.elasticsearch.plist'
    alias stop_elasticsearch='sudo launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.elasticsearch.plist'
    ## To start orientdb use: $ orientdb <start|stop|status> or orientdb-console or orientdb-gremlin
    export EDITOR="/Applications/Emacs.app/Contents/MacOS/Emacs"
fi

export PATH

##
## Aliases
##
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias p='cd ~/Projects; ls;'
alias d='cd ~/Downloads; ls;'

##
## R setup
##
export R_PROFILE_USER='~/.Rprofile'

##
## BASH-IT (terminal customization)
##
export BASH_IT=$HOME/.bash_it
export BASH_IT_THEME='otrenav'
if [ -e $BASH_IT/bash_it.sh ]; then
    source $BASH_IT/bash_it.sh
fi

HISTCONTROL=ignoredups:ignorespace

## Check window size after each
## command to adjust accordingly
shopt -s checkwinsize

##
## ITAM Research
##
export PROJECTS_PATH=~/Projects/itam/research

##
## Virtual Environments for Python
##
export WORKON_HOME=~/Projects/python/envs
export VIRTUALENVWRAPPER_PYTHON=`which python`
export VIRTUALENVWRAPPER_VIRTUALENV=`which virtualenv`
source `which virtualenvwrapper.sh`

##
## Git configuration
##
source ~/.git-completion.bash

##
## Google Cloud SDK
##
if [ -e ~/Projects/system/google-cloud-sdk/completion.bash.inc ]; then
    source ~/Projects/system/google-cloud-sdk/path.bash.inc
    source ~/Projects/system/google-cloud-sdk/completion.bash.inc
fi

##
## Emacs
##
if [[ "$unamestr" == 'Linux' ]]; then
    # export EDITOR=emacsclient
    # export VISUAL=emacsclient
    # export ALTERNATE_EDITOR=""
    function emacs() {
        emacsclient -c -a "" "$@" &
    }
fi
# elif [[ "$unamestr" == 'Darwin' ]]; then
#     function emacs() {
#         emacsclient -c -a "" "$@"
#     }
# fi

##
## File or directory size
##
function file_directory_size() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

##
## Update all projects in directory
## GUD := Git Up Directories
##
function gud() {
    for d in */; do
        echo $d
        cd $d
        git up
        echo " "
        cd ..
    done
}

##
## Count total number of files
## in a folder, including symlinks
##
function file_count() {
    total=0;
    for object in `find . -type l`; do
        count_in_folder=`find $object"/" | wc -l;`
        echo "Count in current $l/: $count_in_folder"
        let total=$total+$count_in_folder
    done
    echo "Total number of files: "$t
}
