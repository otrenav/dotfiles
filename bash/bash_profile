#!/usr/bin/env bash

unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
    ##
    ## Linux setup
    ##
    alias ls='ls -lGF --color=auto'
    alias lsall='ls -flaF --color=auto'
    export PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/usr/texbin:/bin:/sbin:${PATH}"
    double_click='xdg-open'
elif [[ "$unamestr" == 'Darwin' ]]; then
    ##
    ## Mac setup
    ##
    alias ls='ls -lGF'
    alias lsall='ls -flaF'
    alias R='R --no-save --quite'
    alias r='R --no-save --quite'
    alias matlab='matlab -nodesktop -nosplash'
    alias julia='/Applications/Julia-0.4.0.app/Contents/Resources/julia/bin/julia'
    alias start_mysql='launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist'
    alias stop_mysql='launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist'
    export PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:/Library/Frameworks/Python.framework/Versions/3.4/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/usr/texbin:/bin:/sbin:${PATH}"
fi

export PATH

alias grep='grep --color=auto'
alias gg='grep --color=auto -rnwi . -e'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias p='cd ~/Projects; ls;'
alias d='cd ~/Downloads; ls;'
alias s='cd ~/Projects/datata/score-data/project/; ls;'
alias m='./manage.py'
alias rm_pyc='find . -name "*.pyc" -exec rm {} \;'
alias rm_migrations='find . -name "000*.py*" -exec rm {} \;'
alias kp='killall python'
alias file_count='find . -type -f | wc -l'

##
## R
##
export R_PROFILE_USER='~/.Rprofile'

##
## BASH-IT (terminal customization)
##
export BASH_IT=$HOME/.bash_it
export BASH_IT_THEME='otrenav'
if [ -e $BASH_IT/bash_it.sh ]; then
    source $BASH_IT/bash_it.sh
fi
HISTCONTROL=ignoredups:ignorespace

##
## ITAM Research
##
export PROJECTS_PATH=~/Projects/itam/research

##
## Virtual Environments for Python
##
export WORKON_HOME=~/Projects/python/envs
export VIRTUALENVWRAPPER_PYTHON=`which python`
export VIRTUALENVWRAPPER_VIRTUALENV=`which virtualenv`
source `which virtualenvwrapper.sh`

##
## Git configuration
##
source ~/Projects/system/dotfiles/git/git-completion.bash
alias git_prune='git branch -r | awk "{print $1}" | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk "{print $1}" | xargs git branch -d'

##
## Google Cloud
##
if [ -e ~/Projects/system/google-cloud/completion.bash.inc ]; then
    source ~/Projects/system/google-cloud/path.bash.inc
    source ~/Projects/system/google-cloud/completion.bash.inc
fi


##
## Emacs
##
if [[ "$unamestr" == 'Linux' ]]; then
    export kill_emacs="emacsclient -e '(save-buffers-kill-emacs)'"
    export EDITOR="emacsclient -t"
    export VISUAL="emacsclient -c -a emacs"
    export ALTERNATE_EDITOR=""
    function emax() {
        emacsclient -c -a "emacs" "$@" &
    }
elif [[ "$unamestr" == 'Darwin' ]]; then
    alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs'
    export EDITOR="/Applications/Emacs.app/Contents/MacOS/Emacs"
    # function emacs() {
    #     emacsclient -c -a "" "$@"
    # }
fi

##
## Django
##
source ~/Projects/system/dotfiles/bash/scripts/django_bash_completion.bash
alias dj='./manage.py runserver'
alias ds='./manage.py shell_plus'
alias clean_migrations='find . -name "000*.py*" -exec rm {} \;'

##
## File or directory size
##
function file_directory_size() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

##
## Update all projects in directory
## GUD := Git Up Directories
##
function gud() {
    for d in */; do
        echo $d
        cd $d
        git up
        echo " "
        cd ..
    done
}

##
## Switch `score_group` database
##
function switch_database() {
    echo "[+] Switching database for Score Group..."
    mysql -u root < ~/Projects/system/dotfiles/sql/switch_database.sql
    mysql -u root score_group < $1
    echo "[+] Done."
}
