source $HOME/.vim/config/basics.vim

"
" Create dirs on save
"
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
autocmd! BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))

" Theme
highlight ExtraWhitespace ctermbg=red guibg=red
highlight CursorLine ctermbg=236 cterm=bold
highlight PmenuSel ctermbg=240 ctermfg=255
highlight Pmenu ctermbg=245 ctermfg=255
highlight CursorLineNr ctermfg=242
highlight ColorColumn ctermbg=236
highlight LineNr ctermfg=242
filetype plugin indent on
syntax on

autocmd! ColorScheme * highlight ExtraWhitespace ctermbg=red
autocmd! BufWinEnter * match ExtraWhitespace /\s\+$/

" Traverse buffers
nnoremap <leader>bd :bn<CR>:bd#<CR>
nnoremap <leader>w :bd<CR>
nnoremap <Right> :bn<CR>
nnoremap <Left> :bp<CR>

" Traverse windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Move lines around
vnoremap <down> dpV`]
vnoremap <up> dkPV`]
vnoremap > >gv
vnoremap < <gv

" Edit next/previous inside parenthesis
onoremap in( :<c-u>normal! f(vi(<CR>
onoremap in) :<c-u>normal! F)vi(<CR>

" tab navigation mappings
" map tn :tabn<CR>
" map tp :tabp<CR>
" map tm :tabm
" map tt :tabnew
" map ts :tab split<CR>
" map <C-S-Right> :tabn<CR>
" imap <C-S-Right> <ESC>:tabn<CR>
" map <C-S-Left> :tabp<CR>
" imap <C-S-Left> <ESC>:tabp<CR>

" Create/delete lines in normal mode
nnoremap <CR> ko<Esc>j
nnoremap <BS> kdd

" Yank to system clipboard ("+p)
" noremap y "*y :let @+=@*<CR>

noremap <silent> <C-S> :write<CR>
noremap <C-j> ddjP
noremap <C-k> ddkP

nnoremap <leader>fn :set formatoptions+=at<CR>
nnoremap <leader>ff :set formatoptions-=at<CR>
nnoremap <leader>p :set spell! spell?<CR>
nnoremap <leader>v :edit $MYVIMRC<CR>
nnoremap <leader>h :nohlsearch<CR>
nnoremap <S-Tab> :bprevious<CR>
nnoremap <Tab> :bnext<CR>
nnoremap <C-s> :write<CR>
nnoremap <C-S-p> "*p
nnoremap dw diw
nnoremap / /\v

" Workaround C-BS in Vim terminal
noremap! <C-BS> <Esc>diwi<space>
noremap! <C-h> <Esc>diwi<space>

" Quickly close windows
nnoremap <leader>X :q!<CR>
nnoremap <leader>x :x<CR>

" Run the q macro
nnoremap <leader>q @q

vnoremap <silent> <C-S> <C-C>:write<CR>
vnoremap > >gv
vnoremap < <gv
vnoremap / /\v

inoremap <silent> <C-S> <C-O>:write<CR>
inoremap <C-BS> echo "MESSAGE"
inoremap jf <Esc>l
inoremap fj <Esc>l

inoremap <C-s> <Esc><C-s>

autocmd! BufWritePost vimrc source $MYVIMRC
autocmd! FileType gitcommit setlocal spell
autocmd! FileType markdown setlocal spell

"
" Minpac (exec `MinpacUpdate` to install new plugins)
"
packadd minpac
call minpac#init()

function! MinpacUpdatePluginsAndDocs()
    call minpac#update()
    call minpac#clean()
    silent! helptags ALL
endfunction

command! MinpacUpdate call MinpacUpdatePluginsAndDocs()

" Snippets
call minpac#add("SirVer/ultisnips")
call minpac#add("honza/vim-snippets")
call minpac#add("ycm-core/YouCompleteMe")

let g:UltiSnipsSnippetDirectories = ["~/.vim/own-snippets"]
let g:UltiSnipsSnippetsDir = "~/.vim/own-snippets"
let g:UltiSnipsJumpBackwardTrigger = "<leader>sb"
let g:UltiSnipsJumpForwardTrigger = "<leader>sf"
let g:UltiSnipsExpandTrigger = "<leader>ss"
let g:UltiSnipsListSnippets = "<leader>sl"
let g:ycm_use_ultisnips_completer = 1

" Highlight colors in source files
call minpac#add("gko/vim-coloresque", {"type": "opt"})

" Replace from position and forward
call minpac#add("wincent/scalpel")

" Work with surrounding characters
call minpac#add("tpope/vim-surround")

" Easier word replacements
call minpac#add("tpope/vim-abolish")

" Comments
call minpac#add("tomtom/tcomment_vim")

" Smart status line
call minpac#add('vim-airline/vim-airline')
call minpac#add('vim-airline/vim-airline-themes')
let g:airline#extensions#tabline#formatter='unique_tail_improved'
let g:airline_theme='deus'

" Package manager
call minpac#add("k-takata/minpac", {"type": "opt"})

" Go
call minpac#add("fatih/vim-go")

" NERDCommenter
call minpac#add("scrooloose/nerdcommenter")

" Asynchronous Lint Engine (ALE)
call minpac#add("dense-analysis/ale")
let g:ale_fixers = { '*': ['remove_trailing_lines', 'trim_whitespace'] }
" nmap <silent> <C-k> <Plug>(ale_previous_wrap)
" nmap <silent> <C-j> <Plug>(ale_next_wrap)
" let g:ale_echo_msg_error_str = 'E'
" let g:ale_echo_msg_warning_str = 'W'
" let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" let g:ale_keep_list_window_open = 1
" let g:ale_list_vertical = 1
" let g:ale_open_list = 1
let g:ale_completion_tsserver_autoimport = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_completion_enabled = 0
let g:ale_sign_column_always = 1
let g:ale_linters_explicit = 1
let g:ale_fix_on_save = 1

"
" TypeScript
"
augroup FiletypeGroup
    autocmd!
    au BufNewFile,BufRead *.jsx set filetype=javascript.jsx
augroup END

"
" TODOs
"
call minpac#add("fisadev/FixedTaskList.vim")
call minpac#add("aserebryakov/vim-todo-lists")

"
" netrw
"
let g:netrw_altv = 1
let g:netrw_banner = 0
let g:netrw_winsize = 25
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4

let g:NetrwIsOpen=0

function! ToggleNetrw()
    if g:NetrwIsOpen
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Vexplore
    endif
endfunction

noremap <silent> <leader>n :call ToggleNetrw()<CR>

"
" Links (editing)
"
call minpac#add("mattn/webapi-vim")
call minpac#add("christoomey/vim-quicklink")

"
" Custom text objects
"
" let g:vim_textobj_parameter_mapping = ','
call minpac#add("wellle/targets.vim")
call minpac#add("kana/vim-textobj-user")
call minpac#add("bps/vim-textobj-python")
call minpac#add("kana/vim-textobj-indent")
call minpac#add("sgur/vim-textobj-parameter")
call minpac#add("michaeljsmith/vim-indent-object")

"
" Commmentary
"
call minpac#add("tpope/vim-commentary")

"
" Git
"
call minpac#add("tpope/vim-fugitive")
" nnoremap <space>ga :Git add %:p<CR><CR>
" nnoremap <space>gs :Gstatus<CR>
" nnoremap <space>gc :Gcommit -v -q<CR>
" nnoremap <space>gt :Gcommit -v -q %:p<CR>
" nnoremap <space>gd :Gdiff<CR>
" nnoremap <space>ge :Gedit<CR>
" nnoremap <space>gr :Gread<CR>
" nnoremap <space>gw :Gwrite<CR><CR>
" nnoremap <space>gl :silent! Glog<CR>:bot copen<CR>
" nnoremap <space>gp :Ggrep<Space>
" nnoremap <space>gm :Gmove<Space>
" nnoremap <space>gb :Git branch<Space>
" nnoremap <space>go :Git checkout<Space>
" nnoremap <space>gps :Dispatch! git push<CR>
" nnoremap <space>gpl :Dispatch! git pull<CR>
"
" nnoremap <Leader>gs :Gstatus<CR>
" nnoremap <Leader>gd :Gdiff<CR>
" nnoremap <Leader>gb :Gblame<CR>
" nnoremap <Leader>gL :exe ':!cd ' . expand('%:p:h') . '; git la'<CR>
" nnoremap <Leader>gl :exe ':!cd ' . expand('%:p:h') . '; git las'<CR>
" nnoremap <Leader>gh :Silent Glog<CR>
" nnoremap <Leader>gH :Silent Glog<CR>:set nofoldenable<CR>
" nnoremap <Leader>gr :Gread<CR>
" nnoremap <Leader>gw :Gwrite<CR>
" nnoremap <Leader>gp :Git push<CR>
" nnoremap <Leader>g- :Silent Git stash<CR>:e<CR>
" nnoremap <Leader>g+ :Silent Git stash pop<CR>:e<CR>
"
" alias.la=log --oneline --all --decorate --graph
" alias.las=!git --no-pager log --oneline --all --decorate --graph -40
" alias.lass=!git --no-pager log --oneline --all --decorate --graph -10
" alias.lb=log --oneline --decorate --graph
" alias.lbs=!git --no-pager log --oneline --decorate --graph -40
" alias.lbss=!git --no-pager log --oneline --decorate --graph -10

"
" Searching
"
call minpac#add("osyo-manga/vim-anzu")
call minpac#add("haya14busa/is.vim")

"
" Editing
"
call minpac#add("justinmk/vim-sneak")
" s<char1><char>    go to combination (forward)
" S<char1><char>    go to combination (back)
" ;                 go to next
" ``                go back to start
" s<Enter>          repeat last search

call minpac#add("terryma/vim-expand-region")
" +     expand region
" -     shrink region

"
" Projectionist
"
call minpac#add("tpope/vim-projectionist")

"
" Indentation
"
call minpac#add('jeetsukumaran/vim-indentwise')
" [- : Move to previous line of lesser indent than the current line.
" [+ : Move to previous line of greater indent than the current line.
" [= : Move to previous line of same indent as the current line that is separated from the current line by lines of different indents.
" ]- : Move to next line of lesser indent than the current line.
" ]+ : Move to next line of greater indent than the current line.
" ]= : Move to next line of same indent as the current line that is separated from the current line by lines of different indents.

" Snippets
call minpac#add("SirVer/ultisnips")

" Fuzzy finder
call minpac#add("junegunn/fzf")
call minpac#add("junegunn/fzf.vim")

nnoremap <leader>p :<C-u>FZF<CR>
nnoremap <leader>s :Snippets<CR>
nnoremap <leader>f :Files .<CR>
nnoremap <leader>g :GFile<CR>
nnoremap <leader>r :Rg<space>

" Mapping selecting mappings
nnoremap <leader><tab> <plug>(fzf-maps-n)
xnoremap <leader><tab> <plug>(fzf-maps-x)
onoremap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
inoremap <c-x><c-k> <plug>(fzf-complete-word)
inoremap <c-x><c-f> <plug>(fzf-complete-path)
inoremap <c-x><c-j> <plug>(fzf-complete-file-ag)
inoremap <c-x><c-l> <plug>(fzf-complete-line)

" EditorConfig
call minpac#add("editorconfig/editorconfig-vim")

"
" Files
"
call minpac#add("mhinz/vim-startify")

"
" Clean file
"
function! Preserve(command)
    let search=@/
    let cursor_position=getpos('.')
    normal! H
    let window_position=getpos('.')
    call setpos('.', cursor_position)
    execute a:command
    let @/=search
    call setpos('.', window_position)
    normal! zt
    call setpos('.', cursor_position)
endfunction

function! CleanFile()
    retab! 4
    call Preserve("%s/\\s\\+$//e")
    if (exists('b:shouldReindent') && b:shouldReindent)
        call Preserve("normal gg=G")
    endif
endfunction

" Add `let b:shouldReindent=1` to filetypes that need cleaning.
" The addition should be done in `vim/after/ftplugin/*.vim`. By
" default no re-indentation will be applied.
autocmd! BufWritePre * :call CleanFile()
"
" Rename current file
"
function! RenameFile()
    let old_name=expand('%')
    let new_name=input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

"
" ctags
"
command! MakeTags !ctags -R .
